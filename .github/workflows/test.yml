name: " ðŸ§ª build-test"
on: # rebuild any PRs and main branch changes
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  download-vscode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Step Output
        id: my_step
        uses: streetsidesoftware/actions/public/output@v1
        with:
          value: |
            Action: ${{ github.action }}
            Actor: ${{ github.actor }}
            Ref: ${{ github.ref }}
            Event: ${{ toJson(github.event)}}

      - name: Cache Key
        id: cache-key
        uses: streetsidesoftware/actions/public/output@v1
        with:
          value: "vscode-download-${{ github.event.created_at }}"

      - name: Cache Download
        id: cache-download
        uses: actions/cache@v4.2.3
        with:
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            vscode-download-
          path: .vscode-test

      - name: Install
        run: npm i

      - name: Download
        run: npm run test:download-vscode

      - name: Summary
        uses: streetsidesoftware/actions/public/summary@v1
        with:
          text: |
            # Downloaded VSCode
            - Action: ${{ steps.my_step.outputs.value }}
            - Cache Key: ${{ steps.cache-key.outputs.value }}
            - Cache Download: ${{ steps.cache-download.outputs.cache-hit }}

  list_extensions:
    runs-on: ubuntu-latest
    outputs:
      extension_list: ${{ env.EXTENSION_LIST }}
    needs:
      - download-vscode
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: From Script
        run: |
          echo extensions_from_script=$(./scripts/list-extensions.sh) >> $GITHUB_ENV

      - name: EXTENSION_LIST
        env:
          EXTENSION_LIST: ${{ env.extensions_from_script }}
        run: |
          echo EXTENSION_LIST=$EXTENSION_LIST >> $GITHUB_ENV

  build-test:
    runs-on: ubuntu-latest
    needs:
      - list_extensions
    strategy:
      matrix:
        extension_dir: ${{ fromJSON(needs.list_extensions.outputs.extension_list) }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .tool-versions
          cache: npm
      - run: npm install
      - run: |
          cd ${{ matrix.extension_dir }}
          npm run pack-extension
          npm run test:cspell

      - name: Run Linux
        if: runner.os == 'Linux'
        run: |
          cd ${{ matrix.extension_dir }}
          xvfb-run -a npm run test

      - name: Run Windows and MacOS
        if: runner.os != 'Linux'
        run: |
          cd ${{ matrix.extension_dir }}
          npm run test

  # Run the spell checker on all the samples using the extension's settings.
  # This will help with dictionary updates.
  check-samples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .tool-versions
          cache: npm

      - run: npm install
      - name: Check Samples
        run: |
          npm run test:cspell
